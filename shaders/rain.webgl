// https://www.shadertoy.com/view/4ljXDy

// RainScreen - written 2015 by Jakob Thomsen
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
varying vec2 vUv;
uniform sampler2D t_noise;
uniform sampler2D domTexture;
uniform vec2 iResolution;
uniform float iGlobalTime;
uniform vec2 iMouse;

float T;

#define pi 3.1415926

// iq's hash function from https://www.shadertoy.com/view/MslGD8
vec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }

float simplegridnoise(vec2 v)
{
    float s = 1. / 256.;
    vec2 fl = floor(v), fr = fract(v);
    float mindist = 1e9;
    for(int y = -1; y <= 1; y++)
        for(int x = -1; x <= 1; x++)
        {
            vec2 offset = vec2(x, y);
            vec2 pos = .5 + .5 * cos(2. * pi * (T*.1 + hash(fl+offset)) + vec2(0,1.6));
            mindist = min(mindist, length(pos+offset -fr));
        }

    return mindist;
}

float blobnoise(vec2 v, float s)
{
    return pow(.5 + .5 * cos(pi * clamp(simplegridnoise(v)*2., 0., 1.)), s);
}

vec3 blobnoisenrm(vec2 v, float s)
{
    vec2 e = vec2(.01,0);
    return normalize(
           vec3(blobnoise(v + e.xy, s) - blobnoise(v -e.xy, s),
                blobnoise(v + e.yx, s) - blobnoise(v -e.yx, s),
                1.0));
}

float blobnoises(vec2 uv, float s)
{
    float h = 0.0;
    const float n = 3.0;
    for(float i = 0.0; i < n; i++)
    {
        vec2 p = vec2(0.0, 1.0 * iGlobalTime * (i + 1.0) / n) + 1.0 * uv;
    	h += pow(0.5 + 0.5 * cos(pi * clamp(simplegridnoise(p * (i + 1.0)) * 2.0, 0.0, 1.0)), s);
    }

    return h / n;
}

vec3 blobnoisenrms(vec2 uv, float s)
{
    float d = 0.01;
    return normalize(
           vec3(blobnoises(uv + vec2(  d, 0.0), s) - blobnoises(uv + vec2( -d, 0.0), s),
                blobnoises(uv + vec2(0.0,   d), s) - blobnoises(uv + vec2(0.0,  -d), s),
                d));
}

void main( void )
{
    T = iGlobalTime;

    vec2 r = vec2(1.0, iResolution.y / iResolution.x);
    vec2 uv = vUv;
    vec3 n = blobnoisenrms(25.0 * uv * r, 1.);
    gl_FragColor = texture2D(domTexture, uv + 0.05 * n.xy);
}
